# coding: utf-8

"""
    Kibernetika project, backend component

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MlappUniversalServing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'skip_prefix': 'bool',
        'labels': 'dict(str, str)',
        'disabled': 'bool',
        'default_volume_mapping': 'bool',
        'images': 'MlappImages',
        'workspace_id': 'str',
        'work_dir': 'str',
        'autoscale': 'MlappAutoscale',
        'default_mount_path': 'str',
        'front_api': 'str',
        'build': 'str',
        'env': 'list[MlappEnv]',
        'nodes': 'str',
        'type': 'str',
        'spec': 'MlappServingSpec',
        'resources': 'MlappResourceRequest',
        'model_id': 'str',
        'workspace': 'str',
        'replicas': 'int',
        'args': 'str',
        'task_name': 'str',
        'name': 'str',
        'display_name': 'str',
        'build_info': 'object',
        'sources': 'list[MlappVolume]',
        'command': 'str',
        'volumes': 'list[MlappVolumeMount]',
        'model': 'str',
        'ports': 'list[MlappPort]'
    }

    attribute_map = {
        'skip_prefix': 'skipPrefix',
        'labels': 'labels',
        'disabled': 'disabled',
        'default_volume_mapping': 'default_volume_mapping',
        'images': 'images',
        'workspace_id': 'workspace_id',
        'work_dir': 'workDir',
        'autoscale': 'autoscale',
        'default_mount_path': 'default_mount_path',
        'front_api': 'front_api',
        'build': 'build',
        'env': 'env',
        'nodes': 'nodes',
        'type': 'type',
        'spec': 'spec',
        'resources': 'resources',
        'model_id': 'model_id',
        'workspace': 'workspace',
        'replicas': 'replicas',
        'args': 'args',
        'task_name': 'taskName',
        'name': 'name',
        'display_name': 'displayName',
        'build_info': 'build_info',
        'sources': 'sources',
        'command': 'command',
        'volumes': 'volumes',
        'model': 'model',
        'ports': 'ports'
    }

    def __init__(self, skip_prefix=None, labels=None, disabled=None, default_volume_mapping=None, images=None, workspace_id=None, work_dir=None, autoscale=None, default_mount_path=None, front_api=None, build=None, env=None, nodes=None, type=None, spec=None, resources=None, model_id=None, workspace=None, replicas=None, args=None, task_name=None, name=None, display_name=None, build_info=None, sources=None, command=None, volumes=None, model=None, ports=None):  # noqa: E501
        """MlappUniversalServing - a model defined in Swagger"""  # noqa: E501

        self._skip_prefix = None
        self._labels = None
        self._disabled = None
        self._default_volume_mapping = None
        self._images = None
        self._workspace_id = None
        self._work_dir = None
        self._autoscale = None
        self._default_mount_path = None
        self._front_api = None
        self._build = None
        self._env = None
        self._nodes = None
        self._type = None
        self._spec = None
        self._resources = None
        self._model_id = None
        self._workspace = None
        self._replicas = None
        self._args = None
        self._task_name = None
        self._name = None
        self._display_name = None
        self._build_info = None
        self._sources = None
        self._command = None
        self._volumes = None
        self._model = None
        self._ports = None
        self.discriminator = None

        self.skip_prefix = skip_prefix
        if labels is not None:
            self.labels = labels
        self.disabled = disabled
        if default_volume_mapping is not None:
            self.default_volume_mapping = default_volume_mapping
        if images is not None:
            self.images = images
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if work_dir is not None:
            self.work_dir = work_dir
        if autoscale is not None:
            self.autoscale = autoscale
        if default_mount_path is not None:
            self.default_mount_path = default_mount_path
        if front_api is not None:
            self.front_api = front_api
        if build is not None:
            self.build = build
        if env is not None:
            self.env = env
        if nodes is not None:
            self.nodes = nodes
        if type is not None:
            self.type = type
        if spec is not None:
            self.spec = spec
        if resources is not None:
            self.resources = resources
        if model_id is not None:
            self.model_id = model_id
        if workspace is not None:
            self.workspace = workspace
        if replicas is not None:
            self.replicas = replicas
        if args is not None:
            self.args = args
        if task_name is not None:
            self.task_name = task_name
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if build_info is not None:
            self.build_info = build_info
        if sources is not None:
            self.sources = sources
        if command is not None:
            self.command = command
        if volumes is not None:
            self.volumes = volumes
        if model is not None:
            self.model = model
        if ports is not None:
            self.ports = ports

    @property
    def skip_prefix(self):
        """Gets the skip_prefix of this MlappUniversalServing.  # noqa: E501


        :return: The skip_prefix of this MlappUniversalServing.  # noqa: E501
        :rtype: bool
        """
        return self._skip_prefix

    @skip_prefix.setter
    def skip_prefix(self, skip_prefix):
        """Sets the skip_prefix of this MlappUniversalServing.


        :param skip_prefix: The skip_prefix of this MlappUniversalServing.  # noqa: E501
        :type: bool
        """
        if skip_prefix is None:
            raise ValueError("Invalid value for `skip_prefix`, must not be `None`")  # noqa: E501

        self._skip_prefix = skip_prefix

    @property
    def labels(self):
        """Gets the labels of this MlappUniversalServing.  # noqa: E501


        :return: The labels of this MlappUniversalServing.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MlappUniversalServing.


        :param labels: The labels of this MlappUniversalServing.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def disabled(self):
        """Gets the disabled of this MlappUniversalServing.  # noqa: E501


        :return: The disabled of this MlappUniversalServing.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this MlappUniversalServing.


        :param disabled: The disabled of this MlappUniversalServing.  # noqa: E501
        :type: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")  # noqa: E501

        self._disabled = disabled

    @property
    def default_volume_mapping(self):
        """Gets the default_volume_mapping of this MlappUniversalServing.  # noqa: E501


        :return: The default_volume_mapping of this MlappUniversalServing.  # noqa: E501
        :rtype: bool
        """
        return self._default_volume_mapping

    @default_volume_mapping.setter
    def default_volume_mapping(self, default_volume_mapping):
        """Sets the default_volume_mapping of this MlappUniversalServing.


        :param default_volume_mapping: The default_volume_mapping of this MlappUniversalServing.  # noqa: E501
        :type: bool
        """

        self._default_volume_mapping = default_volume_mapping

    @property
    def images(self):
        """Gets the images of this MlappUniversalServing.  # noqa: E501


        :return: The images of this MlappUniversalServing.  # noqa: E501
        :rtype: MlappImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this MlappUniversalServing.


        :param images: The images of this MlappUniversalServing.  # noqa: E501
        :type: MlappImages
        """

        self._images = images

    @property
    def workspace_id(self):
        """Gets the workspace_id of this MlappUniversalServing.  # noqa: E501


        :return: The workspace_id of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this MlappUniversalServing.


        :param workspace_id: The workspace_id of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def work_dir(self):
        """Gets the work_dir of this MlappUniversalServing.  # noqa: E501


        :return: The work_dir of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._work_dir

    @work_dir.setter
    def work_dir(self, work_dir):
        """Sets the work_dir of this MlappUniversalServing.


        :param work_dir: The work_dir of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._work_dir = work_dir

    @property
    def autoscale(self):
        """Gets the autoscale of this MlappUniversalServing.  # noqa: E501


        :return: The autoscale of this MlappUniversalServing.  # noqa: E501
        :rtype: MlappAutoscale
        """
        return self._autoscale

    @autoscale.setter
    def autoscale(self, autoscale):
        """Sets the autoscale of this MlappUniversalServing.


        :param autoscale: The autoscale of this MlappUniversalServing.  # noqa: E501
        :type: MlappAutoscale
        """

        self._autoscale = autoscale

    @property
    def default_mount_path(self):
        """Gets the default_mount_path of this MlappUniversalServing.  # noqa: E501


        :return: The default_mount_path of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._default_mount_path

    @default_mount_path.setter
    def default_mount_path(self, default_mount_path):
        """Sets the default_mount_path of this MlappUniversalServing.


        :param default_mount_path: The default_mount_path of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._default_mount_path = default_mount_path

    @property
    def front_api(self):
        """Gets the front_api of this MlappUniversalServing.  # noqa: E501


        :return: The front_api of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._front_api

    @front_api.setter
    def front_api(self, front_api):
        """Sets the front_api of this MlappUniversalServing.


        :param front_api: The front_api of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._front_api = front_api

    @property
    def build(self):
        """Gets the build of this MlappUniversalServing.  # noqa: E501


        :return: The build of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this MlappUniversalServing.


        :param build: The build of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def env(self):
        """Gets the env of this MlappUniversalServing.  # noqa: E501


        :return: The env of this MlappUniversalServing.  # noqa: E501
        :rtype: list[MlappEnv]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this MlappUniversalServing.


        :param env: The env of this MlappUniversalServing.  # noqa: E501
        :type: list[MlappEnv]
        """

        self._env = env

    @property
    def nodes(self):
        """Gets the nodes of this MlappUniversalServing.  # noqa: E501


        :return: The nodes of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this MlappUniversalServing.


        :param nodes: The nodes of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._nodes = nodes

    @property
    def type(self):
        """Gets the type of this MlappUniversalServing.  # noqa: E501


        :return: The type of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MlappUniversalServing.


        :param type: The type of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def spec(self):
        """Gets the spec of this MlappUniversalServing.  # noqa: E501


        :return: The spec of this MlappUniversalServing.  # noqa: E501
        :rtype: MlappServingSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this MlappUniversalServing.


        :param spec: The spec of this MlappUniversalServing.  # noqa: E501
        :type: MlappServingSpec
        """

        self._spec = spec

    @property
    def resources(self):
        """Gets the resources of this MlappUniversalServing.  # noqa: E501


        :return: The resources of this MlappUniversalServing.  # noqa: E501
        :rtype: MlappResourceRequest
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this MlappUniversalServing.


        :param resources: The resources of this MlappUniversalServing.  # noqa: E501
        :type: MlappResourceRequest
        """

        self._resources = resources

    @property
    def model_id(self):
        """Gets the model_id of this MlappUniversalServing.  # noqa: E501


        :return: The model_id of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this MlappUniversalServing.


        :param model_id: The model_id of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def workspace(self):
        """Gets the workspace of this MlappUniversalServing.  # noqa: E501


        :return: The workspace of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this MlappUniversalServing.


        :param workspace: The workspace of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._workspace = workspace

    @property
    def replicas(self):
        """Gets the replicas of this MlappUniversalServing.  # noqa: E501


        :return: The replicas of this MlappUniversalServing.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this MlappUniversalServing.


        :param replicas: The replicas of this MlappUniversalServing.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def args(self):
        """Gets the args of this MlappUniversalServing.  # noqa: E501


        :return: The args of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this MlappUniversalServing.


        :param args: The args of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._args = args

    @property
    def task_name(self):
        """Gets the task_name of this MlappUniversalServing.  # noqa: E501


        :return: The task_name of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this MlappUniversalServing.


        :param task_name: The task_name of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def name(self):
        """Gets the name of this MlappUniversalServing.  # noqa: E501


        :return: The name of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MlappUniversalServing.


        :param name: The name of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this MlappUniversalServing.  # noqa: E501


        :return: The display_name of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MlappUniversalServing.


        :param display_name: The display_name of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def build_info(self):
        """Gets the build_info of this MlappUniversalServing.  # noqa: E501


        :return: The build_info of this MlappUniversalServing.  # noqa: E501
        :rtype: object
        """
        return self._build_info

    @build_info.setter
    def build_info(self, build_info):
        """Sets the build_info of this MlappUniversalServing.


        :param build_info: The build_info of this MlappUniversalServing.  # noqa: E501
        :type: object
        """

        self._build_info = build_info

    @property
    def sources(self):
        """Gets the sources of this MlappUniversalServing.  # noqa: E501


        :return: The sources of this MlappUniversalServing.  # noqa: E501
        :rtype: list[MlappVolume]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this MlappUniversalServing.


        :param sources: The sources of this MlappUniversalServing.  # noqa: E501
        :type: list[MlappVolume]
        """

        self._sources = sources

    @property
    def command(self):
        """Gets the command of this MlappUniversalServing.  # noqa: E501


        :return: The command of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this MlappUniversalServing.


        :param command: The command of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def volumes(self):
        """Gets the volumes of this MlappUniversalServing.  # noqa: E501


        :return: The volumes of this MlappUniversalServing.  # noqa: E501
        :rtype: list[MlappVolumeMount]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this MlappUniversalServing.


        :param volumes: The volumes of this MlappUniversalServing.  # noqa: E501
        :type: list[MlappVolumeMount]
        """

        self._volumes = volumes

    @property
    def model(self):
        """Gets the model of this MlappUniversalServing.  # noqa: E501


        :return: The model of this MlappUniversalServing.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this MlappUniversalServing.


        :param model: The model of this MlappUniversalServing.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def ports(self):
        """Gets the ports of this MlappUniversalServing.  # noqa: E501


        :return: The ports of this MlappUniversalServing.  # noqa: E501
        :rtype: list[MlappPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this MlappUniversalServing.


        :param ports: The ports of this MlappUniversalServing.  # noqa: E501
        :type: list[MlappPort]
        """

        self._ports = ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MlappUniversalServing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MlappUniversalServing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
